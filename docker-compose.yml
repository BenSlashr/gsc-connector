version: '3.8'

services:
  app:
    build: .
    ports:
      - "8021:8021"
    environment:
      - NODE_ENV=production
      - PORT=8021
      - DB_HOST=postgres
      - DB_NAME=gsc_connector
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - OAUTH_REDIRECT_URI=${OAUTH_REDIRECT_URI}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - API_KEY=${API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - gsc-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=gsc_connector
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - gsc-network

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - gsc-network

volumes:
  postgres_data:
  redis_data:

networks:
  gsc-network:
    driver: bridge